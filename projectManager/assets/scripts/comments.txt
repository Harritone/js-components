class Component {
  constructor// expects id of element where to place this.element and boolean(true if insert before host element)
    // check if instance got host element and if got assigns this.hostElement to it with selection and by default to body
    
   // assigns insert before by default - false
  }
  attach() {
    // attach to this.hostElement with insertAdjacentElement according to this.insertBefore
  }
  detach() {
    //check if there is this.element and if there is remove
  }
}

class Tooltip extends Component { 
  constructor //expects function as an argument that assigns to instance of ProjectItem static field 'hasActiveTooltip' to false
    //calls to superclass constructor
    // assigns to this instance recieved function of ProjectItem instance
    //call create function of this instance
  }
  create() {
    //create an element and assigns to the constant
    // adds a css class of 'card' to the element
    // assign a text content to the element
    // adds an event listener of click to the element
    // add a property 'element' of this class and assigns it to the created element
  }
  closeTooltip = () => {
    //calls detach function of the supperclass
    // calls to a property function that was recieved from ProjectItem instance, sets static field 'hasActiveTooltip' to false
  };
}

class Helper { 
  // static function - clears event listeners from recieved element and returns new element, expexts element as an argument
  static clearEventListeners{
    // clones recieved element and assignes it to the constant
    //replaces recieved element with cloned element
    //returns cloned element
  }
  //static function that expects element id and destination selector as arguments
  static moveElement {
    // selects element from DOM by recieved ID and assigns it to the constant
    // selects element from the DOM by recieved destination selector and assigns it to the constant
    // append element to the destination
  }
}

class ProjectItem {
  // static field that points whether instance has active tooltip or not, by default - flase
  constructor { // constructor expects id, updateProjectListsFunction(from ProjectList instance it is going to be switchProject) and type(active or finished)
    //assigns an id to the instance property
    // assigns recieved from ProjectList instance function to this property
    //calls function of this instance to add event listener to the switch buttton
    // cals function of this instance to add event listener to the more info
  }
  connectSwitchBtn {//function adds an event listener to the switch button, expects type as an argument
    //selects the button from the DOM and assigns it to the variable
    // call the Helper static function and reassigns returned element to the variable
    // checks the type and assigns text content to the element accordingly
    // adds an event listener to the click event to the instance property function(was recieved from ProjectList instance (swictchProject) and binds (null, this.id) - id of the project
  }
  update{//function expects to recieve function from ProjectList instance(switchProject()) and type
    // updates updateProjectHandler whith recieved function
    // calls connectSwitchButton function of this instance and pass type to it as an argument
  }
  showMoreInfoHandler() {// function going to be called when we add an event listener to the show more button
     // checks if instance has active tooltip
     // if it has do nothing
     // if it hasn't assings to the constant a new instance of Tooltip class 
     // and pass an arrow function that sets static field of the ProjectItem instance 'hasActiveTooltip' to false as an argument
     // calls the attach function of the tooltip instance
    // sets the static field hasActiveTooltip of ProjectItem instance to false
  }
  connectMoreInfoBtn() { // adds an event listener to the show more button 
    // selects the button from the DOM and assigns it to the constant
    // adds an event listener to the selected element and calls showMoreInfoHandler when it clicked
  }
}

class ProjectList {
   // creates a static field of an array to collect instances of the ProjectItem class
  constructor{ //expects type as an argument
    // assigns type to the property
     // collect all projects of the type from the DOM
    // loop thrue the collection of all elements of the type
    // instantiate a new instance of the ProjectItem and passes id of collected elements, switchProject function of ProjectList instance binded to this and static property of type then adds it to the projects array(static field) 
    }
  }
  setSwitchHandlerFn { //sets switchHandler property of the Instance when all instances of ProjectList will be instanciated, expects that function as an arfument
  }
  addProject{// function adds ProjectItem to the static field of the ProjectList instance and updates the UI, expects project as an argument
     // adds the recieved project to the static field of the instance
    // calls Helper static function to move element and passes project.id and destination element(active/finished projects unorded list)
    // calls update function of ProjectItem instance on recieved project and passes switchProject function of ProjectList instance binded to this and ProjectList instance property type
  }
  switchProject {// function expects projectId as an argument and finds the project and remove it from the projects array of static field of the ProjectList instance
    // calls ProjectList instance property function switchHandler and find project and pass it further
    // remove project using filter()
  }
}

class App {
  static initialize() { // static method that handles the initialization
    // instantiate the new instance of the ProjectList with 'active' type
    // instantiate the new instance of the ProjectList with 'finished' type
    // calls setSwitchHandlerFn on the activeProjectsList and passes addProject function of the finishedProjectsList of ProjectList instance binded to the finishedProjectsList 
     // the same but vice versa
  }
}

App.initialize();// calls static initialize function on the App class
